// Fitness Tracker.cpp : A new beginning

#include <windows.h>
#include <conio.h>
#include <fstream>
#include <string>

#include<cstdlib>
#include <iostream>
#include <iomanip>
#include <stdio.h>
#include <sstream>


#define OnExit 10
#define OnWelcome 11
#define OnStart 12
#define OnEdit 13
#define OnMusicFile 14
#define OnMetronomeFile 15
#define OnSaveEditStep 16
#define OnCancelEditStep 17
#define OnAddTraining 18
#define OnDeleteTraining 19
#define OnAddStep 20
#define OnDeleteStep 21

using namespace std;

HWND button;
HWND timer;
HWND start;

HWND trainingname;

HWND hTrainingList;
HWND hStepsList;
HWND hEditStepsList;
HWND addtraining;
HWND hStepName;
HWND currentsteptimer;

int chosentraining = 0;

PAINTSTRUCT ps;

HINSTANCE hInst_;

WNDCLASS HomeWndClass;
WNDCLASS MainWndClass;
WNDCLASS EditWndClass;

const int workoutsize = 10;

static int tick = 600;


const string filename = "C:/Users/kiran/source/repos/Fitness Tracker/Fitness Tracker.txt";

HWND HomehWnd;
HWND MainhWnd;
HWND EdithWnd;

HWND hNewStepName;
HWND hNewStepDuration;
HWND hNewStepMusic;
HWND hNewStepMetronome;
HWND hNewStepSpeed;



int hours = 0;
int minutes = 0;
int seconds = 0;
int seccount = 0;
int currentstep = 0;


OPENFILENAMEA ofn;
char musicfilename[260];

OPENFILENAMEA ofn2;
char metronomefilename[260];

// Prototypes

void MainWndAddMenus(HWND hWnd);
void HomePage(HWND hWnd);
void MainPage(HWND hWnd);
void EditPage(HWND hWnd, int selectedtraining);

LRESULT CALLBACK SoftwareHomeProcedure(HWND hWnd, UINT msg, WPARAM wp, LPARAM lp);
LRESULT CALLBACK SoftwareMainProcedure(HWND hWnd, UINT msg, WPARAM wp, LPARAM lp);
LRESULT CALLBACK SoftwareEditProcedure(HWND hWnd, UINT msg, WPARAM wp, LPARAM lp);
WNDCLASS CreateHomeClass(HINSTANCE hInst);
WNDCLASS CreateMainClass(HINSTANCE hIsnt);
WNDCLASS CreateEditClass(HINSTANCE hInst);
void SetOpenFileParam(HWND hWnd);
void SetOpenFileParam2(HWND hWnd);
void ListboxClear(HWND hWnd);



class Step {

public:

    string stepname;
    int duration;
    string musicfile;
    string metronomefile;
    int metronomespeed;
    string outputstring;

    Step()
    {
        stepname = "None";
        duration = 600;
        musicfile = "None";
        metronomefile = "None";
        metronomespeed = 10;
    }

    void ReadFromString(string string_)
    {
        int pos = 0;
        int finalpos = 0;
        const string separator = "#";
        string tempstr;
        stringstream ss;
        stringstream ss2;

        // Get rid of 1st #

        if (string_[0] == '#')
        {
            string_.erase(0, 1);
        }

        // Find 1st #

        pos = string_.find(separator, 0);

        //Find 2nd # to get stepname

        stepname = string_.substr(0, pos);

        finalpos = string_.find(separator, pos + 1);

        //Find 3rd # to get duration

        tempstr = string_.substr(pos + 1, finalpos - pos - 1);

        ss << tempstr;
        ss >> duration;

        pos = string_.find(separator, finalpos + 1);


        // Find 4th # to get musicfile

        musicfile = string_.substr(finalpos + 1, pos - finalpos - 1);

        

        finalpos = string_.find(separator, pos + 1);

        // Find 5th # to get metronomefile


        metronomefile = string_.substr(pos + 1, finalpos - pos - 1);
        pos = string_.find(separator, finalpos + 1);

        // Find 6th # to get Metronome Speed

        tempstr = string_.substr(finalpos + 1, pos - finalpos - 1);
        ss << tempstr;
        ss >> metronomespeed;


    }

    string SaveToString()
    {

        outputstring = "%#" + stepname + "#" + to_string(duration) + "#" + musicfile + "#" + metronomefile + "#" + to_string(metronomespeed);

        return outputstring;
    }
};

class Training {

public:

    string name;
    Step steps[10];
    Step currentstep;
    int size;
    short lastelement;
    string output;




    Training()
    {
        name = "New Training";
        size = 10;
        lastelement = 0;
    }

    //METHODS

    void show(HWND hWnd)
    {
        for (int x = 0; x <= 9; x++)
        {
            if (steps[x].stepname != "None")
            {
                SendMessageA(hWnd, LB_INSERTSTRING, x, (LPARAM)steps[x].stepname.c_str());
            }
            else
            {
                break;
            }
        }
    }

    void ReadFromString(string string_)
    {
        //yoga%#push - ups#300#music.wav#boop.mp3#10%#plank#600#phonk.wav#tick.mp3#120%#handstand#420#gym.wav#sss.mp3#240#!
        // 
        //yoga%#push - ups#300#music.wav#boop.mp3#10%#plank#600#phonk.wav#tick.mp3#120%#handstand#420#gym.wav#sss.mp3#240#!
        //football % #sit - ups#300#music.wav#boop.mp3#10 % #wall - sit#600#phonk.wav#tick.mp3#120 % #dips#420#gym.wav#sss.mp3#240#!
        //    basketball % #clap push - ups#300#music.wav#boop.mp3#10 % #pull - ups#600#phonk.wav#tick.mp3#120 % #V - sits#420#gym.wav#sss.mp3#240#!
        //    kung fu % #None#600#None#None#10 % #!

        int pos = 0;
        int finalpos = 0;
        int sub = 0;
        const string separator = "#";
        const string separator2 = "%";

        pos = string_.find(separator2, 0);
        name = string_.substr(0, pos);

        while (finalpos > -1)
        {

            pos = string_.find(separator2, finalpos);
            finalpos = string_.find(separator2, pos + 1);

                steps[sub].ReadFromString(string_.substr(pos + 1, finalpos - pos - 1));


            sub++;
        }

        lastelement = sub;
    }

    bool Add(string name)
    {
        int sub = 0;


        while (steps[sub].stepname != "None" && steps[sub].stepname != "")
        {
            sub++;
        }


        if (sub < size)
        {

            steps[sub].stepname = name;
            currentstep = steps[sub];
            lastelement++;

            return true;
        }
        else
        {
            return false;
        }
    }
    
    void Delete(string name)
    {
        int sub = 0;
        Step emptystep;

        while (steps[sub].stepname != name)
        {
            sub++;
        }

        steps[sub] = emptystep;

        for (int x = sub; x <= lastelement - sub; x++)
        {
            steps[sub] = steps[sub + 1];
            steps[sub + 1] = emptystep;
        } 
        
    }

    string SaveToString()
    {
        int x = 0;

        while (steps[x].stepname != "None")
        {
            x++;
        }

        if (x == 1)
        {
            x--;
        }

        for (int sub = 0; sub <= x; sub++)
        {
            output = name + steps[sub].SaveToString();
        }

        output = output + "!";

        return output;
    }

};

class TrainingList {

public:

    Training currenttraining;
    Training empty;
    Training Training[workoutsize];
    short size;



    TrainingList()
    {
        size = 10;
    }

    //METHODS

    void showlist(HWND hWnd)
    {
        for (int x = 0; x < size; x++)
        {   
            if (Training[x].name != "New Training")
            {
                SendMessageA(hWnd, LB_INSERTSTRING, x, (LPARAM)Training[x].name.c_str());
            }
            else
            {
                break;
            }
        }
    }

    void ReadFromArray(string workout[workoutsize])
    {
        for (int x = 0; x < workoutsize; x++)
        {
            if (workout[x] != "None")
            {
                Training[x].ReadFromString(workout[x]);
            }
            else
            {
                break;
            }
        }
    }

    void Filetoarray()
    {
        ifstream settings;
        int sub = 0;
        string tempstr;


        settings.open(filename, (ios::app));

        while (settings.eof() == false)
        {
            getline(settings, tempstr);

            if (tempstr == "") { continue; }

            Training[sub].ReadFromString(tempstr);

            if (sub == size + 1) { break; }

            sub++;
        }
        int b = 1;
    }

    void Arraytofile()
    {
        ofstream settings;
        int sub = 0;
        settings.open(filename, ofstream::out | ofstream::trunc);

        while (Training[sub].name != "New Training")
        {
            settings << Training[sub].SaveToString() << endl;
            sub++;
        }

        settings.close();
    }

    bool Add(string name)
    {
        int sub = 0;


        while (Training[sub].name != "New Training" && Training[sub].name != "")
        {
            sub++;
        }


        if (sub < size)
        {

            Training[sub].name = name;
            currenttraining = Training[sub];

            return true;
        }
        else
        {
            return false;
        }
    }

    void Delete(int subscript)
    {
        short last = 0;
        int x = 0;
        

        while (Training[x].name != "New Training")
        {
            x++;
        }

        last = x;

            Training[subscript] = empty;

            for (int sub = subscript; sub <= last - subscript; sub++)
            {
                Training[sub] = Training[sub + 1];
                Training[sub + 1] = empty;
            }

    }

};

TrainingList workouts;
Step steps;
Training currenttrainingobj;


int WINAPI WinMain(HINSTANCE hInst, HINSTANCE jPrevInst, LPSTR args, int ncmdshow) {

    hInst_ = hInst;


    workouts.Filetoarray();

    HomeWndClass = CreateHomeClass(hInst);
    MainWndClass = CreateMainClass(hInst);
    EditWndClass = CreateEditClass(hInst);

    if (!RegisterClassW(&HomeWndClass)) { return -1; }

    if (!RegisterClassW(&MainWndClass)) { return -1; }

    if (!RegisterClassW(&EditWndClass)) { return -1; }

    MSG SoftwareMainMessage = { 0 };

    ps.fErase = 0;


    HomehWnd = CreateWindow(HomeWndClass.lpszClassName, L"Fitness Tracker", WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 1000, 650, NULL, NULL, NULL, NULL);

    ShowWindow(HomehWnd, SW_SHOW);
    UpdateWindow(HomehWnd);

    while (GetMessage(&SoftwareMainMessage, NULL, NULL, NULL)) {


        TranslateMessage(&SoftwareMainMessage);
        DispatchMessage(&SoftwareMainMessage);
    }

    return 0;
}

void SetOpenFileParam(HWND hWnd)
{
    ZeroMemory(&ofn, sizeof(ofn));
    ofn.lStructSize = sizeof(ofn);
    ofn.hwndOwner = hWnd;
    ofn.lpstrFile = musicfilename;
    ofn.nMaxFile = sizeof(musicfilename);
    ofn.lpstrFilter = "*.mp3";
    ofn.lpstrFileTitle = NULL;
    ofn.nFileExtension = 0;
    ofn.lpstrInitialDir = NULL;
    ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST;
}

void SetOpenFileParam2(HWND hWnd)
{
    ZeroMemory(&ofn2, sizeof(ofn2));
    ofn2.lStructSize = sizeof(ofn2);
    ofn2.hwndOwner = hWnd;
    ofn2.lpstrFile = metronomefilename;
    ofn2.nMaxFile = sizeof(metronomefilename);
    ofn2.lpstrFilter = "*.mp3";
    ofn2.lpstrFileTitle = NULL;
    ofn2.nFileExtension = 0;
    ofn2.lpstrInitialDir = NULL;
    ofn2.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST;
}


WNDCLASS CreateHomeClass(HINSTANCE hInst)
{
    WNDCLASS HomeWndClass = { 0 };



    HomeWndClass.style = CS_HREDRAW | CS_VREDRAW;
    HomeWndClass.lpfnWndProc = SoftwareHomeProcedure;
    HomeWndClass.hInstance = hInst;
    HomeWndClass.hIcon = LoadIcon(hInst, MAKEINTRESOURCE(IDI_ICON1));
    HomeWndClass.hCursor = LoadCursor(NULL, IDC_CROSS);
    HomeWndClass.hbrBackground = (HBRUSH)CreateSolidBrush(RGB(0, 0, 50));
    HomeWndClass.lpszClassName = L"HomeWndClass";

    return HomeWndClass;

}

WNDCLASS CreateMainClass(HINSTANCE hInst)
{
    WNDCLASS MainWndClass = { 0 };


    MainWndClass.style = CS_HREDRAW | CS_VREDRAW;
    MainWndClass.lpfnWndProc = SoftwareMainProcedure;
    MainWndClass.hInstance = hInst;
    MainWndClass.hIcon = LoadIcon(hInst, MAKEINTRESOURCE(IDI_ICON1));
    MainWndClass.hCursor = LoadCursor(NULL, IDC_CROSS);
    MainWndClass.hbrBackground = (HBRUSH)CreateSolidBrush(RGB(0, 139, 0));
    MainWndClass.lpszClassName = L"MainWndClass";

    return MainWndClass;

}

WNDCLASS CreateEditClass(HINSTANCE hInst)
{
    WNDCLASS EditWndClass = { 0 };



    EditWndClass.style = CS_HREDRAW | CS_VREDRAW;
    EditWndClass.lpfnWndProc = SoftwareEditProcedure;
    EditWndClass.hInstance = hInst;
    EditWndClass.hIcon = LoadIcon(hInst, MAKEINTRESOURCE(IDI_ICON1));
    EditWndClass.hCursor = LoadCursor(NULL, IDC_CROSS);
    EditWndClass.hbrBackground = (HBRUSH)CreateSolidBrush(RGB(0, 55, 0));
    EditWndClass.lpszClassName = L"EditWndClass";

    return EditWndClass;

}

void ListboxClear(HWND hWnd)
{
    SendMessageA(hWnd, LB_RESETCONTENT, 0, 0);
}

LRESULT CALLBACK SoftwareHomeProcedure(HWND hWnd, UINT msg, WPARAM wp, LPARAM lp) {

    UINT_PTR ID_TIMER{};

    string time = "";
    int length = 0;
    char Buffer[5];
    string startbuttonname = "";
    int count_ = 0;
    int count2 = 0;
    string stepname;

    int selected;
    int end = 0;
    char newtraining[100];
    string base = "%#None#600#None#10%#!";
    int listboxend = 0;
    int idk = 0;
    int ta = 0;
    idk = SendMessageA(hTrainingList, LB_GETCOUNT, 0, 0);
    int chosentraining = 0;
    int stepslbsize = 0;
    WORD hiword = HIWORD(wp);
    WORD loword = LOWORD(wp);
    LPARAM lparam = lp;
    string currentstepname = "";

    if (msg == 528)
    {
        ta = 1;
    };
    switch (msg) {

    case WM_COMMAND:

        switch (HIWORD(wp))
        {
        case LBN_SELCHANGE:

            if ((HWND)lp == hTrainingList)
            {
                int a = 1;
            }
            else if ((HWND)lp == hStepsList)
            {
                int b = 1;
            }

            break;
        }

        switch (wp) {

            // Case When Item In Listbox Selected
        case 65536:
        {
            ListboxClear(hStepsList);

            selected = SendMessageA(hTrainingList, LB_GETCURSEL, 0, 0);

            workouts.Training[selected].show(hStepsList);

            listboxend = SendMessageA(hStepsList, LB_GETCOUNT, 0, 0);
            SendMessageA(hStepsList, LB_DELETESTRING, listboxend, 0);
        }
        break;

        case OnDeleteTraining:
        {


            selected = SendMessageA(hTrainingList, LB_GETCURSEL, 0, 0);
            SendMessageA(hTrainingList, LB_DELETESTRING, selected, 0);

            workouts.Delete(selected);

            UpdateWindow(hWnd);


            break;
        }

        case OnAddTraining:
        {
            GetWindowTextA(addtraining, newtraining, 100);


            if (workouts.Add(newtraining) == true)
            {
                ListboxClear(hTrainingList);
                ListboxClear(hStepsList);
                workouts.showlist(hTrainingList);
                workouts.currenttraining.show(hStepsList);

                UpdateWindow(hWnd);
            }
            else
            {
                MessageBox(hWnd, L"You have reached the maximum number of trainings, delete to add more", L"You have reached the maximum number of trainings, delete to add more", MB_OK);
            }
        }
            break;

        case OnStart:

            chosentraining = SendMessageA(hTrainingList, LB_GETCURSEL, 0, 0);

            if (chosentraining == -1)
            {
                MessageBox(hWnd, L"Choose a Training to continue", L"Choose a Training to continue", MB_OK);

            }
            else
            {

                stepslbsize = SendMessageA(hStepsList, LB_GETCOUNT, 0, 0);

                if (currentstep > stepslbsize)
                {
                    currentstep = 0;
                    MessageBox(hWnd, L"TRAINING COMPLETE !!!!", L"TRAINING COMPLETE !!!!", MB_OK);

                }
                else
                {
                    seccount = workouts.Training[chosentraining].steps[currentstep].duration;

                    SendMessageA(hStepsList, LB_GETTEXT, currentstep, (LPARAM)currentstepname.c_str());
                    SetWindowTextA(currentsteptimer, currentstepname.c_str());

                    length = GetWindowTextA(start, (LPSTR)Buffer, 5);

                    for (int x = 0; x <= length - 1; x++)
                    {
                        startbuttonname = startbuttonname + Buffer[x];
                    }

                    if (startbuttonname == "Stop")
                    {
                        KillTimer(hWnd, ID_TIMER);
                        SetWindowTextA(start, "Start");
                    }
                    else
                    {
                        SetTimer(hWnd, ID_TIMER, 1000, NULL);
                        SetWindowTextA(start, "Stop");
                    }
                }
            }

           

            break;

        case OnEdit:
        {
            selected = SendMessageA(hTrainingList, LB_GETCURSEL, 0, 0);

            currenttrainingobj = workouts.Training[selected];

            if (selected == -1)
            {
                MessageBoxA(hWnd, "Choose a training to continue", "Choose a training to continue", MB_OK);
            }
            else
            {


                EditPage(hWnd, selected);
            }
        }
            break;

        default: break;
        }

        break;

    case WM_TIMER:
    {


        if (seccount < 0)
        {
            KillTimer(hWnd, ID_TIMER);
            SetWindowTextA(start, "Start");
            MessageBeep(0xFFFFFFFF);

            

            stepslbsize = SendMessageA(hStepsList, LB_GETCOUNT, 0, 0);

            if (currentstep + 1 >= stepslbsize)
            {
                currentstep = 0;
                MessageBox(hWnd, L"TRAINING COMPLETE !!!!", L"TRAINING COMPLETE !!!!", MB_OK);
                SetWindowTextA(currentsteptimer, "Current Step: ");
            }
            else
            {
                seccount = 0;
                currentstep++;
                seccount = workouts.Training[chosentraining].steps[currentstep].duration;
                
                SendMessageA(hStepsList, LB_GETTEXT, currentstep, (LPARAM)currentstepname.c_str());
                SetWindowTextA(currentsteptimer, currentstepname.c_str());
                SetTimer(hWnd, ID_TIMER, 1000, NULL);
            }
        }
        else
        {
            hours = seccount / 3600;
            minutes = (seccount / 60) % 60;
            seconds = seccount % 60;

            if (seconds < 10 && minutes < 10)
            {
                time = "0" + to_string(hours) + ":0" + to_string(minutes) + ":0" + to_string(seconds);
            }
            else if (minutes < 10)
            {
                time = "0" + to_string(hours) + ":0" + to_string(minutes) + ":" + to_string(seconds);
            }
            else if (seconds < 10)
            {
                time = "0" + to_string(hours) + ":" + to_string(minutes) + ":0" + to_string(seconds);
            }


            SetWindowTextA(timer, time.c_str());
        }
        seccount--;
    }
        break;



    case WM_CREATE:

        //MessageBoxA(hWnd, "WELCOME BACK!", "WELCOME BACK!", MB_OK);

        HomePage(hWnd);

        break;


    case WM_DESTROY:

        workouts.Arraytofile();

        PostQuitMessage(0);

        break;


    default: return DefWindowProc(hWnd, msg, wp, lp);
    }

}

LRESULT CALLBACK SoftwareMainProcedure(HWND hWnd, UINT msg, WPARAM wp, LPARAM lp) {
    /*switch (msg) {



    case WM_COMMAND:

        switch (wp) {

        default: break;
        }
        break;

    case WM_CREATE:

        HomePage(hWnd);

        break;

    case OnExit:

        PostQuitMessage(0);

    case WM_DESTROY:

        PostQuitMessage(0);

        break;


    default: return DefWindowProc(hWnd, msg, wp, lp);
    }*/
    return DefWindowProc(hWnd, msg, wp, lp);
}

LRESULT CALLBACK SoftwareEditProcedure(HWND hWnd, UINT msg, WPARAM wp, LPARAM lp)
{

    char newstep[100];
    char selectedtrainingname[100];
    int sub = 0;
    int endmark = 0;
    string base = "#None#600#None#10%#";
    string newstepfinal = "";
    int x = 0;
    int first = 0;
    int second = 0;
    string ifnone = "";
    int selected = 0;
    int selectedstep = 0;
    WORD hiword = HIWORD(wp);
    WORD loword = LOWORD(wp);
    char BufferDeleteItem[100]{};
    
    char currenttraining[100]{};

    char currentstepname[100]{};
    char newname[100]{};
    char newduration[100]{};
    char newspeed[100]{};
        
    switch (msg) {

    
    case WM_COMMAND:
    {      
        switch (HIWORD(wp))
        {
        case LBN_SELCHANGE:
        {
            selected = SendMessageA(hEditStepsList, LB_GETCURSEL, 0, 0);

            GetWindowTextA(trainingname, selectedtrainingname, 99);

            sub = 0;

            for (int x = 0; x <= workoutsize; x++)
            {

                if (workouts.Training[x].name == selectedtrainingname)
                {
                    break;
                }
                else
                {
                    sub++;
                }
            }

            SetWindowTextA(hNewStepName, workouts.Training[sub].steps[selected].stepname.c_str());
            SetWindowTextA(hNewStepDuration, to_string(workouts.Training[sub].steps[selected].duration).c_str());
            SetWindowTextA(hNewStepSpeed, to_string(workouts.Training[sub].steps[selected].metronomespeed).c_str());
        }
        break;
        }
        switch (wp) {


            
        


        case OnAddStep:
        {
            sub = 0;
            GetWindowTextA(hStepName, newstep, 99);
            GetWindowTextA(trainingname, selectedtrainingname, 99);

            

            while (workouts.Training[x].name != selectedtrainingname)
            {
                x++;
            }

            workouts.Training[x].Add(newstep);
            ListboxClear(hEditStepsList);
            workouts.Training[x].show(hEditStepsList);

        }

        break;

        case OnDeleteStep:
            sub = 0;
            selectedstep = SendMessageA(hEditStepsList, LB_GETCURSEL, 0, 0);

            SendMessageA(hEditStepsList, LB_GETTEXT, selectedstep, (LPARAM)BufferDeleteItem);
            SendMessageA(hEditStepsList, LB_DELETESTRING, selectedstep, 0);

            while (workouts.Training[sub].name != BufferDeleteItem)
            {
                sub++;
            }

            workouts.Training[sub].Delete(BufferDeleteItem);

            

            break;

        case OnSaveEditStep:

            sub = 0;

            GetWindowTextA(trainingname, BufferDeleteItem, 99);

            while (workouts.Training[sub].name != BufferDeleteItem)
            {
                sub++;
            }

            selected = 0;
            selected = SendMessageA(hEditStepsList, LB_GETCURSEL, 0, 0);
            SendMessageA(hEditStepsList, LB_GETTEXT, selected, (LPARAM)currentstepname);

            GetWindowTextA(hNewStepName, newname, 99);
            GetWindowTextA(hNewStepDuration, newduration, 99);
            GetWindowTextA(hNewStepSpeed, newspeed, 99);

            workouts.Training[sub].steps[selected].stepname = newname;
            workouts.Training[sub].steps[selected].duration = stoi(newduration);
            workouts.Training[sub].steps[selected].metronomespeed = stoi(newspeed);

            SendMessageA(hEditStepsList, LB_DELETESTRING, selected, 0);
            SendMessageA(hEditStepsList, LB_INSERTSTRING, selected, (LPARAM)newname);

            break;

        case OnCancelEditStep:

            SetWindowTextA(hNewStepName, "Enter Name: ");
            SetWindowTextA(hNewStepDuration, "Enter Duration (sec)");
            SetWindowTextA(hNewStepSpeed, "Enter Metronome Speed (ticks/m)");

            break;

        case OnMusicFile:

            GetSaveFileNameA(&ofn);

            break;

        case OnMetronomeFile:

            GetSaveFileNameA(&ofn2);

            break;

        default: break;
        }
    }
        break;

        

    case WM_CREATE:

        SetOpenFileParam(hWnd);
        SetOpenFileParam2(hWnd);

        break;

    case WM_DESTROY:

        DestroyWindow(EdithWnd);

        break;


    default: return DefWindowProc(hWnd, msg, wp, lp);
    }
    return DefWindowProc(hWnd, msg, wp, lp);
}

void MainWndAddMenus(HWND hWnd) {

    HMENU RootMenu = CreateMenu();

    HMENU SubMenu = CreateMenu();
    HMENU SubActionMenu = CreateMenu();


    AppendMenu(SubMenu, MF_POPUP, OnExit, L"Exit");

    AppendMenu(RootMenu, MF_POPUP, (UINT_PTR)SubMenu, L"File");

    AppendMenu(RootMenu, MF_POPUP, NULL, L"Help");

    SetMenu(hWnd, RootMenu);

}

void HomePage(HWND hWnd)
{


    string workout;
    string trainingname;
    string stepname;
    int count = 0;
    int count2 = 0;

    MainWndAddMenus(hWnd);

    CreateWindowA("static", "Training List: ", WS_CHILD | WS_VISIBLE | ES_CENTER, 35, 25, 265, 20, hWnd, NULL, NULL, NULL);
    hTrainingList = CreateWindowEx(WS_EX_CLIENTEDGE, L"listbox", L"Training List: ", WS_CHILD | WS_VISIBLE | LBS_NOTIFY, 35, 55, 265, 450, hWnd, NULL, NULL, NULL);



        SendMessageA(hTrainingList, LB_DELETESTRING, 0, 0);

        workouts.showlist(hTrainingList);
        workouts.Training[0].show(hStepsList);

     



    CreateWindowA("button", "Add", WS_CHILD | WS_VISIBLE | ES_CENTER, 35, 510, 120, 50, hWnd, (HMENU)OnAddTraining, NULL, NULL);

    CreateWindowA("button", "Delete", WS_CHILD | WS_VISIBLE | ES_CENTER, 182, 510, 120, 50, hWnd, (HMENU)OnDeleteTraining, NULL, NULL);

    CreateWindowA("button", "Edit", WS_CHILD | WS_VISIBLE | ES_CENTER, 670, 510, 265, 50, hWnd, (HMENU)OnEdit, NULL, NULL);

    CreateWindowA("static", "Steps List: ", WS_CHILD | WS_VISIBLE | ES_CENTER, 670, 25, 265, 20, hWnd, NULL, NULL, NULL);
    hStepsList = CreateWindowEx(WS_EX_CLIENTEDGE, L"listbox", L"Steps List: ", WS_CHILD | WS_VISIBLE | LBS_NOTIFY, 670, 55, 265, 450, hWnd, NULL, NULL, NULL);

    start = CreateWindowA("button", "Start", WS_CHILD | WS_VISIBLE | ES_CENTER, 350, 35, 275, 200, hWnd, (HMENU)OnStart, NULL, NULL);

    timer = CreateWindowA("static", "00:00:00", WS_CHILD | WS_VISIBLE | ES_CENTER, 350, 250, 275, 60, hWnd, NULL, NULL, NULL);

    addtraining = CreateWindowA("edit", "Enter New Training Name Here:", WS_CHILD | WS_VISIBLE | ES_CENTER, 350, 430, 275, 60, hWnd, NULL, NULL, NULL);

    currentsteptimer = CreateWindowA("static", "Current Step:", WS_CHILD | WS_VISIBLE | ES_CENTER, 350, 350, 275, 60, hWnd, NULL, NULL, NULL);


    HFONT hFont = CreateFont(35, 0, 0, 0, FW_DONTCARE, FALSE, FALSE, FALSE, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH | FF_SWISS, L"Times New Roman");
    SendMessage(start, WM_SETFONT, WPARAM(hFont), TRUE);
    SendMessage(timer, WM_SETFONT, WPARAM(hFont), TRUE);


}

void MainPage(HWND hWnd)
{

    MainWndAddMenus(hWnd);

    /* MainhWnd = CreateWindow(MainWndClass.lpszClassName)*/

    hTrainingList = CreateWindowEx(WS_EX_CLIENTEDGE, L"listbox", L"Training List: ", WS_CHILD | WS_VISIBLE, 5, 30, 265, 450, hWnd, NULL, NULL, NULL);

    CreateWindowA("button", "Add", WS_VISIBLE | WS_CHILD | ES_CENTER, 5, 480, 85, 40, hWnd, NULL, NULL, NULL);
    CreateWindowA("button", "Edit", WS_VISIBLE | WS_CHILD | ES_CENTER, 95, 480, 85, 40, hWnd, NULL, NULL, NULL);
    CreateWindowA("button", "Delete", WS_VISIBLE | WS_CHILD | ES_CENTER, 185, 480, 85, 40, hWnd, NULL, NULL, NULL);

    CreateWindowA("static", "Selected Training:", WS_VISIBLE | WS_CHILD | ES_CENTER, 380, 25, 120, 40, hWnd, NULL, NULL, NULL);

    HWND hwnda = CreateWindowEx(WS_EX_CLIENTEDGE, TEXT("STATIC"), TEXT("Training 1"), WS_CHILD | WS_VISIBLE | SS_CENTER, 400, 90, 300, 50, hWnd, HMENU(NULL), GetModuleHandle(NULL), NULL);
    HFONT hFont = CreateFont(35, 0, 0, 0, FW_DONTCARE, FALSE, FALSE, FALSE, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH | FF_SWISS, L"Times New Roman");
    SendMessage(hwnda, WM_SETFONT, WPARAM(hFont), TRUE);


    HWND button = CreateWindowA("button", "Start", WS_VISIBLE | WS_CHILD | ES_CENTER, 400, 170, 300, 125, hWnd, HMENU(NULL), NULL, NULL);
    SendMessage(button, WM_SETFONT, WPARAM(hFont), TRUE);

    CreateWindowA("static", "Stages: ", WS_VISIBLE | WS_CHILD | ES_CENTER, 380, 320, 120, 40, hWnd, NULL, NULL, NULL);

    HWND stage = CreateWindowEx(WS_EX_CLIENTEDGE, TEXT("STATIC"), TEXT("Stage 1"), WS_CHILD | WS_VISIBLE | SS_CENTER, 400, 370, 300, 50, hWnd, HMENU(NULL), GetModuleHandle(NULL), NULL);
    SendMessage(button, WM_SETFONT, WPARAM(hFont), TRUE);

    CreateWindowEx(WS_EX_CLIENTEDGE, L"listbox", L"Stage 1", WS_CHILD | WS_VISIBLE, 400, 400, 300, 150, hWnd, NULL, NULL, NULL);



}

void EditPage(HWND hWnd, int selectedtraining)
{
    MainWndAddMenus(hWnd);

    EdithWnd = CreateWindow(EditWndClass.lpszClassName, L"Edit Training", WS_VISIBLE | WS_OVERLAPPEDWINDOW, 100, 100, 750, 600, NULL, NULL, NULL, NULL);


    hEditStepsList = CreateWindowEx(WS_EX_CLIENTEDGE, L"listbox", L"Steps: ", WS_CHILD | WS_VISIBLE | LBS_NOTIFY, 15, 100, 265, 385, EdithWnd, NULL, NULL, NULL);

    workouts.Training[selectedtraining].show(hEditStepsList);

    CreateWindowA("static", "Steps List: ", WS_CHILD | WS_VISIBLE | ES_CENTER, 15, 75, 265, 20, EdithWnd, NULL, NULL, NULL);

    CreateWindowA("button", "Add", WS_CHILD | WS_VISIBLE | ES_CENTER, 15, 490, 125, 50, EdithWnd, (HMENU)OnAddStep, NULL, NULL);
    CreateWindowA("button", "Delete", WS_CHILD | WS_VISIBLE | ES_CENTER, 155, 490, 125, 50, EdithWnd, (HMENU)OnDeleteStep, NULL, NULL);

    trainingname = CreateWindowA("edit", "Training Name", WS_CHILD | WS_VISIBLE | ES_CENTER, 275, 25, 265, 20, EdithWnd, NULL, NULL, NULL);

    SetWindowTextA(trainingname, (LPCSTR)workouts.Training[selectedtraining].name.c_str());

    CreateWindowA("static", "Name: ", WS_CHILD | WS_VISIBLE | ES_CENTER, 350, 100, 150, 40, EdithWnd, NULL, NULL, NULL);
    CreateWindowA("static", "Duration (sec): ", WS_CHILD | WS_VISIBLE | ES_CENTER, 350, 150, 150, 40, EdithWnd, NULL, NULL, NULL);
    CreateWindowA("static", "Music File Location: ", WS_CHILD | WS_VISIBLE | ES_CENTER, 350, 200, 150, 40, EdithWnd, NULL, NULL, NULL);
    CreateWindowA("static", "Metronome Sound File Location: ", WS_CHILD | WS_VISIBLE | ES_CENTER, 350, 250, 150, 40, EdithWnd, NULL, NULL, NULL);
    CreateWindowA("static", "Metronome Speed (ticks/m): ", WS_CHILD | WS_VISIBLE | ES_CENTER, 350, 300, 150, 40, EdithWnd, NULL, NULL, NULL);

    hNewStepName = CreateWindowA("edit", "Enter Name: ", WS_CHILD | WS_VISIBLE | ES_CENTER, 545, 100, 175, 40, EdithWnd, NULL, NULL, NULL);
    hNewStepDuration = CreateWindowA("edit", "Enter Duration (sec): ", WS_CHILD | WS_VISIBLE | ES_CENTER, 545, 150, 175, 40, EdithWnd, NULL, NULL, NULL);
    hNewStepMusic = CreateWindowA("button", "Click for Music File: ", WS_CHILD | WS_VISIBLE | ES_CENTER | ES_MULTILINE | BS_ICON, 545, 200, 175, 40, EdithWnd, (HMENU)OnMusicFile, NULL, NULL);
    hNewStepMetronome = CreateWindowA("button", "Click for Metronome File: ", WS_CHILD | WS_VISIBLE | ES_CENTER | ES_MULTILINE | BS_ICON, 545, 250, 175, 40, EdithWnd, (HMENU)OnMetronomeFile, NULL, NULL);
    hNewStepSpeed = CreateWindowA("edit", "Enter Metronome Speed (ticks/m): ", WS_CHILD | WS_VISIBLE | ES_CENTER | ES_MULTILINE, 545, 300, 175, 40, EdithWnd, NULL, NULL, NULL);

    CreateWindowA("button", "Save", WS_CHILD | WS_VISIBLE | ES_CENTER, 375, 375, 125, 50, EdithWnd, (HMENU)OnSaveEditStep, NULL, NULL);
    CreateWindowA("button", "Cancel", WS_CHILD | WS_VISIBLE | ES_CENTER, 535, 375, 125, 50, EdithWnd, (HMENU)OnCancelEditStep, NULL, NULL);

    hStepName = CreateWindowA("Edit", "Enter New Step Name", WS_CHILD | WS_VISIBLE | ES_CENTER, 450, 475, 150, 50, EdithWnd, NULL, NULL, NULL);



    ShowWindow(EdithWnd, SW_SHOW);
    UpdateWindow(EdithWnd);

}





